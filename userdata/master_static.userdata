#cloud-config
users:
  - default

ssh_pwauth: True

chpasswd:
  list: |
    ubuntu:${password}
  expire: False

hostname: ${hostname}

write_files:
  - content: |
      #!/bin/bash
      run_cmd() {
        retry=10
        pause=60
        attempt=0
        echo "############################################################################################"
        while [ $attempt -ne $retry ]; do
          if eval "$@"; then
            echo "$1 PASSED"
            break
          else
            echo "$1 FAILED"
          fi
          ((attempt++))
          sleep $pause
          if [ $attempt -eq $retry ]; then
            echo "$1 FAILED after $retry retries" | tee /tmp/cloudInitFailed.log
            exit 255
          fi
        done
      }
      # run_cmd 'sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common'
      run_cmd 'sudo rm -f /tmp/apt-key.gpg; wget https://packages.cloud.google.com/apt/doc/apt-key.gpg -O /tmp/apt-key.gpg; test $(ls -l /tmp/apt-key.gpg | awk '"'"'{print $5}'"'"') -gt 0'
      run_cmd 'sudo apt-key add /tmp/apt-key.gpg'
      run_cmd 'sudo rm -f /tmp/signing.asc; wget https://baltocdn.com/helm/signing.asc -O /tmp/signing.asc; test $(ls -l /tmp/signing.asc | awk '"'"'{print $5}'"'"') -gt 0'
      run_cmd 'sudo apt-key add /tmp/signing.asc'
      run_cmd 'sudo rm -f /tmp/gpg; wget https://download.docker.com/linux/ubuntu/gpg -O /tmp/gpg; test $(ls -l /tmp/gpg | awk '"'"'{print $5}'"'"') -gt 0'
      run_cmd 'sudo apt-key add /tmp/gpg'
      # run_cmd 'sudo add-apt-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"; grep -r --include "*.list" "^deb" /etc/apt/sources.list | grep kubernetes'
      # run_cmd 'sudo add-apt-repository "deb https://baltocdn.com/helm/stable/debian/ all main"; grep -r --include "*.list" "^deb" /etc/apt/sources.list | grep helm'
      # run_cmd 'sudo add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"; grep -r --include "*.list" "^deb" /etc/apt/sources.list | grep docker'
      run_cmd '! sudo add-apt-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main" | grep Err:'
      run_cmd '! sudo add-apt-repository "deb https://baltocdn.com/helm/stable/debian/ all main" | grep Err:'
      run_cmd '! sudo add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | grep Err:'
      run_cmd 'apt-get install -y docker-ce=${Docker_version}; ls /usr/bin/docker'
      run_cmd 'apt-get install -y kubeadm=${K8s_version} kubectl=${K8s_version} kubelet=${K8s_version}; ls /usr/bin/kubeadm /usr/bin/kubectl /usr/bin/kubelet'
      run_cmd 'apt-get install -y helm; ls /usr/bin/helm'
      run_cmd 'sudo apt-get install -y jq; ls /usr/bin/jq'
      sudo usermod -a -G docker ubuntu
      ip=$(ip -f inet addr show $(ip route | grep default |  awk ' {print $5}') | awk '/inet / {print $2}' | awk -F/ '{print $1}')
      sudo kubeadm config images pull
      sudo kubeadm init --pod-network-cidr=${K8s_network_pod} --apiserver-advertise-address $ip
      mkdir -p /home/ubuntu/.kube
      sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
      echo "alias k=kubectl" | sudo tee -a /home/ubuntu/.profile
      echo "source <(kubectl completion bash | sed s/kubectl/k/g)" | sudo tee -a /home/ubuntu/.profile
      export KUBECONFIG=/etc/kubernetes/admin.conf
      #
      # docker login if docker_registry_username and docker_registry_password are defined
      #
      docker_registry_username=${docker_registry_username}
      docker_registry_password=${docker_registry_password}
      if [[ -z "$docker_registry_username" || -z "$docker_registry_password" ]]; then
        echo "docker_registry_username and docker_registry_password are not defined"
      else
        ping -c 1 foo
        while [ $? -ne 0 ] ; do sleep 5 ; docker login --username $docker_registry_username --password $docker_registry_password ; done
      fi
      #
      # Download docker images
      #
      run_cmd "docker pull tacobayle/busybox-v1; docker image ls | grep tacobayle/busybox-v1"
      #
      # CNI download images
      #
      cni=${cni_name}
      ako_service_type=${ako_service_type}
      if [ "$cni" == "antrea" ] ; then
        if [ "$ako_service_type" == "NodePortLocal" ] ; then
          run_cmd 'wget -O /tmp/antrea.yml.without_nodeportlocal https://github.com/vmware-tanzu/antrea/releases/download/v1.2.3/antrea.yml; ls /tmp/antrea.yml.without_nodeportlocal'
          cp /tmp/antrea.yml.without_nodeportlocal /tmp/antrea.yml
          sed -i -e "s/    #  NodePortLocal: false/      NodePortLocal: true/g" /tmp/antrea.yml
        else
          run_cmd 'wget -O /tmp/antrea.yml https://github.com/vmware-tanzu/antrea/releases/download/v1.2.3/antrea.yml; test $(ls -l /tmp/antrea.yml | awk '"'"'{print $5}'"'"') -gt 0'
        fi
        run_cmd 'kubectl apply -f /tmp/antrea.yml'
      else
        if [ "$cni" == "calico" ] ; then
          run_cmd 'wget -O /tmp/calico.yml https://docs.projectcalico.org/manifests/calico.yaml; test $(ls -l /tmp/calico.yml | awk '"'"'{print $5}'"'"') -gt 0'
          for image in $(cat /tmp/calico.yml | grep 'image: ' | awk -F 'image: ' '{print $2}'); do image_to_search=$(echo $image | sed -e "s/docker.io\///g" | awk -F':' '{print $1}') ; run_cmd "docker pull $image; docker image ls | grep $image_to_search" ; done
        fi
        if [ "$cni" == "flannel" ] ; then
          run_cmd 'wget -O /tmp/flannel.yml https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml; test $(ls -l /tmp/flannel.yml | awk '"'"'{print $5}'"'"') -gt 0'
          for image in $(cat /tmp/flannel.yml | grep 'image: ' | awk -F 'image: ' '{print $2}'); do image_to_search=$(echo $image | awk -F':' '{print $1}') ; run_cmd "docker pull $image; docker image ls | grep $image_to_search" ; done
        fi
      fi
      #
      # K8s generate join command
      #
      kubeadm token create --print-join-command | tee /home/ubuntu/join-command
      sudo chown ubuntu:ubuntu /home/ubuntu/join-command
      #
      echo "cloud init done" | tee /tmp/cloudInitDone.log
    path: /opt/bootstrap.sh
    permissions: "0755"
  - encoding: base64
    content: ${network_config}
    path: /etc/netplan/50-cloud-init.yaml
  - content: |
      network: {config: disabled}
    path: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg

runcmd:
  - netplan apply
  - /opt/bootstrap.sh